# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ktIul-KqW3NfbJTYWZRkceTbrOjAhVo5
"""

!pip install -q sentence-transformers scikit-learn

import pandas as pd
import random, numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from sentence_transformers import SentenceTransformer

import random
import pandas as pd

random.seed(42)  # herkes için aynı sıralama

df = pd.read_excel("A1-B1-B2-C1-KelimeListesi.xlsx")
questions = df.sample(20, random_state=42)  # aynı sorular gelir

file_path ="C:/Users/akbash3/Desktop/A1-B1-B2-C1-KelimeListesi.xlsx"

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

file_path = list(uploaded.keys())[0]

df = pd.read_excel(file_path)

cols_lower = {c.lower(): c for c in df.columns}
df = df.rename(columns={
    cols_lower.get("kelimeler", list(df.columns)[0]): "word",
    cols_lower.get("anlam", list(df.columns)[1]): "meaning",
    cols_lower.get("seviye", list(df.columns)[2]): "level"
})[["word", "meaning", "level"]]

df["meaning"] = df["meaning"].astype(str)
df["level"] = df["level"].astype(str).str.lower().str.strip()

# --- 2) Katsayılar ---
weights = {"a1": 1, "a2": 2, "b1": 3, "b2": 5, "c1": 7}

# --- 3) Semantic Model ---
EMBED_MODEL_NAME = "paraphrase-multilingual-MiniLM-L12-v2"
model = SentenceTransformer(EMBED_MODEL_NAME)
meanings = df["meaning"].tolist()
embeddings = model.encode(meanings, convert_to_numpy=True, show_progress_bar=True)

# --- 4) Yanlış şıkları üret ---
def get_wrong_semantic(idx, n=3):
    correct = df.loc[idx, "meaning"]
    sims = cosine_similarity([embeddings[idx]], embeddings)[0]
    candidates = np.argsort(-sims)
    wrongs = []
    for j in candidates:
        if j == idx:
            continue
        cand = df.loc[int(j), "meaning"]
        if cand != correct and cand not in wrongs:
            wrongs.append(cand)
        if len(wrongs) == n:
            break
    return wrongs

def generate_question(idx):
    correct = df.loc[idx, "meaning"]
    wrongs = get_wrong_semantic(idx, n=3)
    options = wrongs + [correct]
    random.shuffle(options)
    options.append("Boş bırak")  # her soruya eklenir
    return {
        "word": df.loc[idx, "word"],
        "options": options,
        "answer": correct,
        "level": df.loc[idx, "level"]
    }

# --- 5) Quiz Başlat ---
NUM_QUESTIONS = 20
selected_idxs = df.sample(NUM_QUESTIONS, replace=False).index.tolist()
questions = [generate_question(idx) for idx in selected_idxs]

score = 0
per_level_score = {k:0 for k in weights.keys()}

print("🔹 İngilizce Kelime Quizine Hoşgeldiniz!\n")

for i,q in enumerate(questions, 1):
    print(f"\nSoru {i}: '{q['word']}' ne demektir?")
    for j, opt in enumerate(q["options"], 1):
        print(f"{j}) {opt}")

    ans = input("Cevabınızı girin (1-5): ").strip()
    try:
        chosen = q["options"][int(ans)-1]
    except:
        chosen = "Boş bırak"

    if chosen == "Boş bırak":
        print("⏭ Pas geçtiniz. Doğru cevap:", q["answer"])
    elif chosen == q["answer"]:
        w = weights.get(q["level"], 1)
        score += w
        per_level_score[q["level"]] += w
        print(f"✅ Doğru! (+{w} puan)")
    else:

        print(f"❌ Yanlış. Doğru cevap: {q['answer']}")

# --- 6) Sonuçlar ---
max_score = sum(weights.get(df.loc[idx, "level"], 1) for idx in selected_idxs)
final_score = int((score / max_score) * 100)

print("\n🎯 Test Bitti!")
print("Toplam Puanınız:", final_score, "/ 100")
print("Seviye bazlı skor:", per_level_score)

predicted_level = max(per_level_score.items(), key=lambda x: x[1])[0]
print("Tahmini seviyeniz:", predicted_level.upper())

